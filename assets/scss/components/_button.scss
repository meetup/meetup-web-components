//
// Default buttons
//
.button {
	@include buttonBase();
	@include buttonColor($bgColor: $C_blue);

	&:focus {
		outline: 1px dotted $C_borderDark;
	}

	.inverted & {
		@include buttonColor(
			$bgColor: $C_textSecondaryInverted,
			$hoverColor: opacify($C_textSecondaryInverted, 0.1),
			$activeColor: opacify($C_textSecondaryInverted, 0.25)
		);

		&:focus {
			outline: 1px dotted $C_borderDarkInverted;
		}
	}
}

//
// Primary buttons
//
%button--primary,
.button--primary {
	@include buttonColor(
		$bgColor: $C_red,
		$hoverColor: darken($C_red, 10%),
		$activeColor: darken($C_red, 15%)
	);

	.inverted & {
		@include buttonColor(
			$bgColor: $C_contentBG,
			$hoverColor: transparentize($C_contentBG, 0.2),
			$activeColor: transparentize($C_contentBG, 0.4)
		);
	}
}

//
// Subtle/neutral buttons
//
%button--neutral,
.button--neutral {
	@include buttonColor(
		$bgColor: $C_buttonBGNeutral,
		$hoverColor: opacify($C_buttonBGNeutral, 0.05),
		$activeColor: opacify($C_buttonBGNeutral, 0.1),
		$textColor: $C_textPrimary
	);

	.inverted & {
		@include buttonColor(
			$bgColor: $C_buttonBGNeutralInverted,
			$hoverColor: opacify($C_buttonBGNeutralInverted, 0.05),
			$activeColor: opacify($C_buttonBGNeutralInverted, 0.1),
			$textColor: $C_textPrimaryInverted
		);
		@include color-all($C_textPrimaryInverted);
	}
}

//
// Bordered buttons
//
.button--bordered {
	$C_borderedHoverBase: transparentize($C_textPrimary, 0.4);
	@include buttonColor(
		$bgColor: $C_contentBG,
		$hoverColor: $C_lightGray,
		$activeColor: $C_lightGray
	);
	border: 1px solid $C_border;

	&:active {
		border-color: opacify($C_border, 0.2);
	}

	&.button--disabled,
	&[disabled] {
		border: 1px solid $C_border;
	}

	.inverted & {
		@include buttonColor(
			$bgColor: $C_textSecondary,
			$hoverColor: lighten(transparentize($C_textSecondary, 0.2), 25%),
			$activeColor: lighten(transparentize($C_textSecondary, 0.2), 50%)
		);
		border: 1px solid opacify($C_borderInverted, 0.2);

		&:hover,
		&:focus {
			transform: translateY(0);
		}
	}
}

.button--hasHoverShadow {
	@include shadowOnHover();

	&.button--disabled,
	&[disabled] {
		box-shadow: none;
		transform: translateY(0);
	}
}

//
// Disabled buttons
//
.button[disabled],
.button--disabled {
	@include buttonColor(
		$bgColor: $C_buttonBGNeutral--disabled,
		$hoverColor: $C_buttonBGNeutral--disabled,
		$activeColor: $C_buttonBGNeutral--disabled,
		$textColor: $C_textHint
	);
	cursor: default;
	outline: none; // stylelint-disable-line declaration-property-value-blacklist
	pointer-events: none;

	.inverted & {
		@include buttonColor(
			$bgColor: $C_buttonBGNeutralInverted--disabled,
			$hoverColor: $C_buttonBGNeutralInverted--disabled,
			$activeColor: $C_buttonBGNeutralInverted--disabled,
			$textColor: $C_textHintInverted
		);
		@include color-all($C_textHintInverted);
	}
}

//
// Reset buttons
//
.button--reset {
	@include buttonColor(
		$bgColor: transparent,
		$hoverColor: transparent,
		$activeColor: transparent,
		$textColor: $C_textPrimary
	);
	border-radius: 0;
	font-size: inherit;
	padding: 0;

	&,
	&.button--disabled,
	&.button[disabled] {
		@include buttonColor(
			$bgColor: transparent,
			$hoverColor: transparent,
			$activeColor: transparent,
			$textColor: $C_textPrimary
		);
	}

	.inverted & {
		@include buttonColor(
			$bgColor: transparent,
			$hoverColor: transparent,
			$activeColor: transparent,
			$textColor: $C_textPrimaryInverted
		);
	}
}

//
// Button size modifiers
//
%button--small,
.button--small {
	@extend %text--small;
	border-radius: $defaultRadius;
	padding: $space-quarter $space;
}

//
// Full width button
//
%button--fullWidth,
.button--fullWidth,
.button.span-100 {
	display: block;
	text-align: center;
	width: 100%;
}

//
// Icon buttons
//
.button-label,
.button-icon {
	align-self: center;
}

.button-label {
	// this full shorthand property for `flex`
	// is required to prevent IE11 from "shrinkwrapping" text nodes
	flex: 1 1 auto;
	text-align: center;

	.button-icon-wrapper & {
		padding-left: $space-half;
	}

	.button-icon-wrapper--right & {
		padding-right: $space-half;
	}
}

.button--iconOnly {
	padding: $space-half $space;
}

[data-swarm-button] {
	// stylelint-disable-next-line selector-pseudo-class-no-unknown
	&:focus-visible {
		outline: Highlight auto 1px !important;
		outline: -webkit-focus-ring-color auto 1px !important;
	}
}

[data-swarm-button="primary"] {
	$active: lighten($C_meetupRed, 5%);
	background-color: $C_meetupRed !important;
	border: 1px solid $C_meetupRed !important;

	&:hover,
	&:focus {
		background-color: $active !important;
		border: 1px solid $active !important;
	}
}

/* with icon */
%swarm-button-icon-left {
	margin-right: var(--space-half);
}
%swarm-button-icon-right {
	margin-left: var(--space-half);
}
%swarm-button-icon-only {
	padding: var(--space-half);
}

[data-swarm-button][data-icon="left"] .svg-icon,
[data-swarm-button][data-icon="left"] [data-swarm-icon] {
	@extend %swarm-button-icon-left;
}

[data-swarm-button][data-icon="right"] .svg-icon,
[data-swarm-button][data-icon="right"] [data-swarm-icon] {
	@extend %swarm-button-icon-right;
}

[data-swarm-link][data-icon="left"] .svg-icon {
	@extend %swarm-button-icon-left;
}

[data-swarm-link][data-icon="right"] .svg-icon {
	@extend %swarm-button-icon-right;
}

[data-swarm-link][data-icon="only"] {
	@extend %swarm-button-icon-only;
}
