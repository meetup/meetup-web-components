.inputContainer {
	position: relative;
}

//
// Input icons
//
.icon--field {
	align-content: center;
	bottom: 0;
	display: flex !important;
	left: 0;
	padding: $space;
	position: absolute;
	top: 0;

	.svg-icon {
		fill: $C_textPrimary;
	}
}

input:focus + .icon--field {
	@include color-svg($C_textPrimary);
}

//
// Labels
//
.label--field {
	display: inline-block;
	padding-bottom: $space-quarter;
}

.label--minor {
	font-weight: $W_normal;
}

.label--required::after {
	color: $C_textSecondary;
	content: attr(data-requiredtext);
	// font-size: $font-size-tiny;
	font-weight: $W_normal;
	line-height: 0;
	margin-left: $space / 4;
	position: relative;
	top: 0;
}

.label--disabled {
	color: $C_textSecondary;
}

//
// Helper text
//
.helperTextContainer {
	padding-bottom: $space-quarter;
}

//
// Validation styles
//
.field--error {
	border-color: $C_attention !important;

	&:focus {
		border-color: $C_attention !important;
	}
}

//
// Reset field styles
//
// We need to disable stylelint's `selector-no-qualifying-type`
// rule because we need to beat the specificity of the base form
// styles coming from swarm-sasstools.
//
/* stylelint-disable selector-no-qualifying-type */
select.field--reset,
input.field--reset,
input.field--reset:hover,
input.field--reset:focus,
input.field--reset:active {
	@include resetFieldStyles();

	.inverted & {
		@include resetFieldStyles();
	}
}

[type="number"].field--reset,
[type="number"].field--reset:hover,
[type="number"].field--reset:focus,
[type="number"].field--reset:active {
	// hide spinner in Firefox
	-moz-appearance: textfield;
}
/* stylelint-enable */

//
// Styles for a field with an icon
//
.field--withIcon {
	background-position: $space center;
	background-repeat: no-repeat;
}

//
// Styles to visually mimic inputs
//
.fauxInput {
	@include formInput();

	// manually changing height to match other inputs
	height: ($font-size * $line-height) + $space * 2;

	&.disabled {
		@include formInput--disabled();
	}

	&:hover {
		@include formInput--hovered();
	}

	&.focused {
		@include formInput--focused();
	}

	&.error {
		border-color: $C_attention !important;
	}

	.inverted & {
		background-color: $C_contentBGInverted;
		border-color: $C_borderInverted;
		color: $C_textPrimaryInverted;

		&:hover {
			border-color: $C_borderDarkInverted;
		}

		&[disabled] {
			background-color: $C_borderInverted;
			border-color: transparent;
			color: $C_textSecondaryInverted;

			/* stylelint-disable selector-max-specificity */
			&:hover {
				background-color: $C_borderInverted;
			}
			/* stylelint-enable */
		}
	}
}

//
// Radio and Checkbox styles
//
$toggleSize: 20px;
$C_toggleHighlight: $C_blue;

.toggleLabel {
	padding-bottom: $space-half;

	.toggleLabel-container,
	.toggleLabel-container:last-child {
		padding-left: $space-half;
	}

	&:hover {
		.fauxToggle {
			border-color: $C_toggleHighlight;

			/* stylelint-disable selector-max-specificity, selector-max-class */
			&.checked {
				background-color: darken($C_toggleHighlight, 15%);
			}

			&.disabled {
				background-color: $C_white;
				border-color: $C_textHint;
			}
			/* stylelint-enable */
		}
	}
}

.fauxToggle {
	background: $C_white;
	border: 1px solid $C_textSecondary;
	height: $toggleSize;
	width: $toggleSize;

	.svg-icon {
		@include color-all($C_textPrimaryInverted);
	}

	&.checked {
		background-color: $C_toggleHighlight;
		border-color: transparent;
	}

	&.disabled {
		@include color-all($C_textHint);
		border-color: $C_textHint;
	}

	&.checked--disabled {
		background-color: $C_white;
		border-color: $C_textHint;
	}

	&.focused {
		border-color: $C_toggleHighlight;
	}

	&.checked--focused {
		box-shadow: 0 0 4px 1px $C_toggleHighlight;
	}
}

.radio:focus {
	+ .fauxToggle {
		border-color: $C_toggleHighlight;

		/* stylelint-disable selector-max-specificity, selector-max-class */
		&.checked {
			box-shadow: 0 0 4px 1px $C_toggleHighlight;
		}
		/* stylelint-enable */
	}
}

.fauxToggle--checkbox {
	border-radius: $smallRadius;
}

.fauxToggle--radio,
.radio-indicator {
	border-radius: 50%;
}

.checkbox-indicator {
	height: 100%;
}

//
// Select input
//
.select--reset {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	-webkit-user-select: none;
	-moz-user-select: -moz-none;
	-ms-user-select: none;
	user-select: none;

	&::-ms-expand {
		display: none;
	}

	&:focus::-ms-value {
		background: transparent;
		color: $C_textPrimary;
	}

	&:focus {
		outline: 0;
	}
}

.select-customArrow {
	bottom: $space; // 4px is for margin between forms
	pointer-events: none;
	position: absolute;
	right: $space;
}

.padding--selectArrow {
	padding-right: $media-xs + $space + $space-half;
	// $media-xs:   enough padding for the arrow
	// $space:      preserve right padding in forms
	// $space-half: give a little space between the arrow and the text
}

//
// Time input
//
.timeInput-meridian:focus {
	font-weight: $W_medium;
}

.timeInput-meridianContainer {
	margin-left: $space-half;
}

.fauxInput--time {
	.flex,
	.flex-item,
	input,
	input:focus,
	input:hover,
	input:active {
		height: 100%;
	}

	input {
		max-width: 2em;
	}

	.svg {
		display: none;
	}
}

//
// Search input
//
[type="search"] {
	// avoid safari user agent weirdness with search fields
	-webkit-appearance: textfield;
}

//
// Character counter
//
.charCount {
	bottom: 0;
	position: absolute;
	right: $space-half;
}

.textarea-no-resize {
	resize: none;
}
